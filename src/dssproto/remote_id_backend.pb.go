// Code generated by protoc-gen-go. DO NOT EDIT.
// source: remote_id.proto

package dssproto

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DSSServiceServer is the server API for DSSService service.
type DSSServiceServer interface {
	// DSS: /uas_reporters/{id}
	//
	// Delete reference to an Entity.  USSs should not delete PositionReporting Entities before the end of the last managed flight plus the retention period.
	DeleteUASReporter(context.Context, *DeleteUASReporterRequest) (*DeleteUASReporterResponse, error)
	// DSS: /subscriptions/{id}
	//
	// Delete a subscription.
	DeleteSubscription(context.Context, *DeleteSubscriptionRequest) (*DeleteSubscriptionResponse, error)
	// DSS: /uas_reporters
	//
	// Retrieve references to all visible airspace Entities in the DAR for a given area during the given time.  Note that some Entities returned will lie entirely outside the requested area because an individual DAR cell cannot filter EntityReferences by exact geography.
	//
	// Only PositionReporting Entities shall be visible to clients providing the `dss.read.position_reporting_entities` scope.
	SearchEntityReferences(context.Context, *SearchUASReportersRequest) (*SearchUASReportersResponse, error)
	// DSS: /subscriptions
	//
	// Retrieve subscriptions intersecting an area of interest.  Subscription notifications are only triggered by (and contain details of) changes to Entities in the DSS; they do not involve any other data transfer such as remote ID telemetry updates.  Only Subscriptions belonging to the caller are returned.
	SearchSubscriptions(context.Context, *SearchSubscriptionsRequest) (*SearchSubscriptionsResponse, error)
	// DSS: /subscriptions/{id}
	//
	// Verify the existence/valdity and state of a particular subscription.
	GetSubscription(context.Context, *GetSubscriptionRequest) (*GetSubscriptionResponse, error)
	// DSS: /uas_reporters/{id}
	//
	// Create or update reference to an Entity.  Unless otherwise specified, the EntityType of an existing Entity may not be changed.
	//
	// The `details_url` field in the request body is required for all Entities except PositionReporting Entities.
	//
	// `PositionReporting Entities`:
	// Authorization scope `dss.write.position_reporting_entities` is required.  The DSS assumes the USS has already added the appropriate retention period to operation end time in EntityReference's `time_end` extents field before storing it.  Updating `time_start` is not allowed if it is before the current time.
	//
	// `Operation Entities`:
	// Authorization scope `dss.write.operation_entities` is required.
	PutUASReporter(context.Context, *PutUASReporterRequest) (*PutUASReporterResponse, error)
	// DSS: /subscriptions/{id}
	//
	// Create or update a subscription.  Subscription notifications are only triggered by (and contain details of) changes to Entities in the DSS; they do not involve any other data transfer such as remote ID telemetry updates.
	//
	// Note that the types of content that should be sent to the created subscription depends on the scope in the provided access token.
	PutSubscription(context.Context, *PutSubscriptionRequest) (*PutSubscriptionResponse, error)
}

func RegisterDSSServiceServer(s *grpc.Server, srv DSSServiceServer) {
	s.RegisterService(&_DSSService_serviceDesc, srv)
}

func _DSSService_DeleteUASReporter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUASReporterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServiceServer).DeleteUASReporter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dss.DSSService/DeleteUASReporter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServiceServer).DeleteUASReporter(ctx, req.(*DeleteUASReporterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSSService_DeleteSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServiceServer).DeleteSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dss.DSSService/DeleteSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServiceServer).DeleteSubscription(ctx, req.(*DeleteSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSSService_SearchEntityReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUASReportersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServiceServer).SearchEntityReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dss.DSSService/SearchEntityReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServiceServer).SearchEntityReferences(ctx, req.(*SearchUASReportersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSSService_SearchSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServiceServer).SearchSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dss.DSSService/SearchSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServiceServer).SearchSubscriptions(ctx, req.(*SearchSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSSService_GetSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServiceServer).GetSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dss.DSSService/GetSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServiceServer).GetSubscription(ctx, req.(*GetSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSSService_PutUASReporter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutUASReporterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServiceServer).PutUASReporter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dss.DSSService/PutUASReporter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServiceServer).PutUASReporter(ctx, req.(*PutUASReporterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSSService_PutSubscription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutSubscriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSSServiceServer).PutSubscription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dss.DSSService/PutSubscription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSSServiceServer).PutSubscription(ctx, req.(*PutSubscriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DSSService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dss.DSSService",
	HandlerType: (*DSSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteUASReporter",
			Handler:    _DSSService_DeleteUASReporter_Handler,
		},
		{
			MethodName: "DeleteSubscription",
			Handler:    _DSSService_DeleteSubscription_Handler,
		},
		{
			MethodName: "SearchEntityReferences",
			Handler:    _DSSService_SearchEntityReferences_Handler,
		},
		{
			MethodName: "SearchSubscriptions",
			Handler:    _DSSService_SearchSubscriptions_Handler,
		},
		{
			MethodName: "GetSubscription",
			Handler:    _DSSService_GetSubscription_Handler,
		},
		{
			MethodName: "PutUASReporter",
			Handler:    _DSSService_PutUASReporter_Handler,
		},
		{
			MethodName: "PutSubscription",
			Handler:    _DSSService_PutSubscription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "remote_id.proto",
}
